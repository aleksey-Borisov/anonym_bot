import sqlite3
from aiogram import Router, F, Bot
from aiogram.filters import Command, Filter
from aiogram.types import Message, CallbackQuery
import logger
from admin_service import is_admin

router = Router()

class AdminFilter(Filter):
  async def __call__(self, message: Message) -> bool:
    return await is_admin(message.from_user.id)


@router.message(Command("ban"), AdminFilter())
async def ban_user(message: Message, bot: Bot):
  args = message.text.split()
  if len(args) < 3:
    return await message.answer(
      "–í–≤–µ–¥–∏—Ç–µ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /ban `<user_id>` `<–ø—Ä–∏—á–∏–Ω–∞>`",
      parse_mode="MarkdownV2"
    )

  try:
    user_id = int(args[1])
    reason = ' '.join(args[2:])

    try:
      user = await bot.get_chat(user_id)
    except:
      return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with sqlite3.connect('bans.db') as conn:
      cursor = conn.cursor()

      if cursor.execute("SELECT 1 FROM banned_users WHERE user_id=?", (user_id,)).fetchone():
        return await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")

      cursor.execute('''INSERT INTO banned_users 
                            (user_id, username, reason) 
                            VALUES (?, ?, ?)''',
                     (user_id, user.username, reason))
      conn.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user_id} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    logger.info(f"Admin {message.from_user.id} banned {user_id}. Reason: {reason}")

  except ValueError:
    await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
  except Exception as e:
    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    logger.error(f"Ban error: {str(e)}")
@router.message(Command("unban"), AdminFilter())
async def unban_user(message: Message):
    args = message.text.split()
    if len(args) < 2:
      return await message.answer(
        "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /ban `<user_id>` `<–ø—Ä–∏—á–∏–Ω–∞>`",
        parse_mode="MarkdownV2"
      )

    try:
        user_id = int(args[1])

        conn = sqlite3.connect('bans.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM banned_users WHERE user_id=?", (user_id,))

        if not cursor.fetchone():
            conn.close()
            return await message.answer("‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")

        cursor.execute("DELETE FROM banned_users WHERE user_id=?", (user_id,))
        conn.commit()
        conn.close()

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")



@router.callback_query(F.data == "banned_list", AdminFilter())
async def banned_list(callback: CallbackQuery):

  conn = sqlite3.connect('bans.db')
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM banned_users")
  banned_users = cursor.fetchall()
  conn.close()

  if not banned_users:
    return await callback.message.answer("üö´ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

  response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
  for user in banned_users:
    response += f"üÜî : {user[0]}\n –ü—Ä–∏—á–∏–Ω–∞: {user[2]}\n\n"

  await callback.message.answer(response)
  await callback.answer()


@router.callback_query(F.data == "ban_user", AdminFilter())
async def ban_user_instructions(callback: CallbackQuery):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –±–∞–Ω—É"""
    await callback.message.answer(
        "üìù –î–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ:\n"
        "<code>/ban user_id –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/ban 12345678 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</code>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "unban_user", AdminFilter())
async def ban_user_instructions(callback: CallbackQuery):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –±–∞–Ω—É"""
    await callback.message.answer(
        "üìù –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ:\n"
        "<code>/unban user_id</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/unban 12345678</code>",
        parse_mode="HTML"
    )
    await callback.answer()